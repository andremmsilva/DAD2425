package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.util.CollectorStreamObserver;
import dadkvs.util.GenericResponseCollector;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.Iterator;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

	DadkvsServerState server_state;
	int timestamp;

	public DadkvsMainServiceImpl(DadkvsServerState state) {
		this.server_state = state;
		this.timestamp = 0;
	}

	private boolean broadcastToReplicas(DadkvsMain.CommitRequest request, int sequenceNumber) {
		final int responses_needed = 1;
		boolean result = false;

		DadkvsMain.CommitRequest.Builder broadcastRequest = DadkvsMain.CommitRequest.newBuilder()
				.setReqid(request.getReqid())
				.setKey1(request.getKey1())
				.setVersion1(request.getVersion1())
				.setKey2(request.getKey2())
				.setVersion2(request.getVersion2())
				.setWritekey(request.getWritekey())
				.setWriteval(request.getWriteval())
				.setSequenceNumber(sequenceNumber);

		ArrayList<DadkvsMain.CommitReply> broadcastResponses = new ArrayList<DadkvsMain.CommitReply>();
		GenericResponseCollector<DadkvsMain.CommitReply> broadcastCollector = new GenericResponseCollector<DadkvsMain.CommitReply>(
				broadcastResponses, server_state.n_servers);

		System.out.println("Leader broadcasting " + request.getReqid() + " with sequence nr " + sequenceNumber);
		for (int i = 0; i < server_state.n_servers; i++) {
			if (i == server_state.my_id)
				continue;
			CollectorStreamObserver<DadkvsMain.CommitReply> broadcastObserver = new CollectorStreamObserver<DadkvsMain.CommitReply>(
					broadcastCollector);
			server_state.async_stubs[i].committx(broadcastRequest.build(), broadcastObserver);
		}
		broadcastCollector.waitForTarget(responses_needed);

		if (broadcastResponses.size() >= responses_needed) {
			Iterator<DadkvsMain.CommitReply> replyIterator = broadcastResponses.iterator();
			DadkvsMain.CommitReply reply = replyIterator.next();
			result = reply.getAck();
		}
		System.out.println("Alive");

		return result;
	}

	@Override
	public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
		// for debug purposes
		System.out.println("Receiving read request:" + request);

		int reqid = request.getReqid();
		int key = request.getKey();
		VersionedValue vv = this.server_state.store.read(key);

		DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
				.setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
	}

	@Override
	public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
		// for debug purposes
		int reqid = request.getReqid();
		int key1 = request.getKey1();
		int version1 = request.getVersion1();
		int key2 = request.getKey2();
		int version2 = request.getVersion2();
		int writekey = request.getWritekey();
		int writeval = request.getWriteval();
		int req_seq_nr = request.getSequenceNumber();

		// for debug purposes
		System.out.println("reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2
				+ " wk " + writekey + " writeval " + writeval + " seq " + req_seq_nr);

		this.timestamp++;
		TransactionRecord txrecord = new TransactionRecord(
				key1,
				version1,
				key2,
				version2,
				writekey,
				writeval,
				this.timestamp);

		BufferableRequest br;
		if (server_state.i_am_leader) {
			System.out.println("Leader received request from client...");

			server_state.incrementSequenceNumber();
			br = new BufferableRequest(
					reqid,
					responseObserver,
					txrecord,
					server_state.sequence_number);

			broadcastToReplicas(request, server_state.sequence_number);
			server_state.workToDo.add(br);
			System.out.println(server_state.workToDo);
		} else {
			if (req_seq_nr == -1) {
				// Coming from the client, let's wait until we have a sequence number
				System.out.println("Non-leader received request from client. Buffering...");

				br = new BufferableRequest(reqid, responseObserver, txrecord);
				server_state.unsequencedRequests.put(reqid, br);
				System.out.println(server_state.unsequencedRequests);
				return;
			}

			// Coming from the leader.
			System.out.println(server_state.unsequencedRequests);
			server_state.setSequenceNumber(req_seq_nr);
			br = server_state.unsequencedRequests.get(reqid);
			if (br == null) {
				System.out.println(
						"Unexpected error - no match found in unsequenced requests for the request provided by the leader - "
								+ reqid);
				return;
			}

			br.setSequenceNumber(req_seq_nr);
			server_state.unsequencedRequests.remove(reqid);
			server_state.workToDo.add(br);
			responseObserver.onNext(DadkvsMain.CommitReply.newBuilder()
					.setAck(true)
					.setReqid(reqid)
					.build());
			responseObserver.onCompleted();
			System.out.println(server_state.workToDo);
		}

		server_state.main_loop.wakeup();
	}
}
